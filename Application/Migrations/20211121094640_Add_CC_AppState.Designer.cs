// <auto-generated />
using System;
using Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Application.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211121094640_Add_CC_AppState")]
    partial class Add_CC_AppState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Entities.ApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Domain.Entities.BranchScience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BranchScience");
                });

            modelBuilder.Entity("Domain.Entities.CriticalTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CriticalTechnology");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Domain.Entities.Efficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Efficiency");
                });

            modelBuilder.Entity("Domain.Entities.FullScaleSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.HasIndex("Location")
                        .IsUnique();

                    b.ToTable("FullScaleSample");
                });

            modelBuilder.Entity("Domain.Entities.GRNTI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GRNTI");
                });

            modelBuilder.Entity("Domain.Entities.Grant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FundingVolume")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("Period")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceOfFinancing")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("Grant");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contract")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<DateTime>("Deadline")
                        .HasMaxLength(13)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Subject")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Sum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InfrastructureCustomer");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructurePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("Location")
                        .IsUnique();

                    b.ToTable("InfrastructurePhoto");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("ResearchDirectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ResearchDirectionId");

                    b.ToTable("InfrastructureProjects");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureProjectRealization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.ToTable("InfrastructureProjectRealization");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureResearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("ResearchDirectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ResearcherId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ResearchDirectionId");

                    b.HasIndex("ResearcherId");

                    b.ToTable("InfrastructureResearch");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureResearcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("MemberId");

                    b.ToTable("InfrastructureResearcher");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureScientificLeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("InfrastructureScientificLeader");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureServiceProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("PriorityDirectionId")
                        .HasColumnType("integer");

                    b.Property<string>("PriorityDirectionNTRRF")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("PriorityDirectionId");

                    b.ToTable("InfrastructureServiceProvided");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureSpecialist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EducationDescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryFunctions")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("WorkingConditions")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.ToTable("InfrastructureSpecialist");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureTechnicalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationArea")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("InfrastructureTypeEquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId");

                    b.HasIndex("InfrastructureTypeEquipmentId");

                    b.ToTable("InfrastructureTechnicalEquipment");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureTechnicalLeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InfrastructureProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureProjectId")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("InfrastructureTechnicalLeader");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureTypeEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InfrastructureTypeEquipment");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.ToTable("InnovativeBranch");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.ToTable("InnovativeDepartment");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeDevelopment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationArea")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("ApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<string>("Appointment")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("BranchScienceId")
                        .HasColumnType("integer");

                    b.Property<string>("Competitiveness")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("CriticalTechnologyId")
                        .HasColumnType("integer");

                    b.Property<string>("EconomicEffect")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("EfficiencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndWork")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImplementationExperience")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("MethodOfApplication")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PositiveResult")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("PriorityDirectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadinessDegreeId")
                        .HasColumnType("integer");

                    b.Property<string>("SignsOfTechnicalSolution")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("SourcesOfFinancing")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Specifications")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("StartWork")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TypeResearchId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("BranchScienceId");

                    b.HasIndex("CriticalTechnologyId");

                    b.HasIndex("EfficiencyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PriorityDirectionId");

                    b.HasIndex("ReadinessDegreeId");

                    b.HasIndex("TypeResearchId");

                    b.ToTable("InnovativeDevelopments");

                    b.HasCheckConstraint("CC_StartEndWork", "\"StartWork\" <= \"EndWork\"");

                    b.HasCheckConstraint("CC_Email", "\"Email\" ~* '^[A-Z0-9._%-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$)'");

                    b.HasCheckConstraint("CC_Phone", "\"Phone\" ~* '^[0 - 9\\.] +$)'");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeLeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("InnovativeLeader");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("InnovativeMember");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AcademicDegree")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("AcademicRank")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Domain.Entities.Patent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Patent");
                });

            modelBuilder.Entity("Domain.Entities.PresentationMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("InnovativeDevelopmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("InnovativeDevelopmentId");

                    b.HasIndex("Location")
                        .IsUnique();

                    b.ToTable("PresentationMaterial");
                });

            modelBuilder.Entity("Domain.Entities.PriorityDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PriorityDirection");
                });

            modelBuilder.Entity("Domain.Entities.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DOI")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Quartile")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("Publication");
                });

            modelBuilder.Entity("Domain.Entities.ReadinessDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReadinessDegree");
                });

            modelBuilder.Entity("Domain.Entities.ResearchDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResearchDirection");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnnotatedDescription")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int?>("ApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("YearOfFoundation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ScientificSchools");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<int>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("ScientificSchoolBranch");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("ScientificSchoolDepartment");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolFounder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("ScientificSchoolFounder");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolGraduateStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("ScientificSchoolGraduateStudent");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolLeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("ScientificSchoolLeader");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("ScientificSchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScientificSchoolId");

                    b.ToTable("ScientificSchoolMember");
                });

            modelBuilder.Entity("Domain.Entities.TypeResearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypeResearch");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FirstActivity")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasCheckConstraint("CC_FirstActivityLastActivity", "\"FirstActivity\" <= \"LastActivity\"");
                });

            modelBuilder.Entity("Domain.Entities.FullScaleSample", b =>
                {
                    b.HasOne("Domain.Entities.InnovativeDevelopment", null)
                        .WithMany("FullScaleSamples")
                        .HasForeignKey("InnovativeDevelopmentId");
                });

            modelBuilder.Entity("Domain.Entities.GRNTI", b =>
                {
                    b.HasOne("Domain.Entities.InnovativeDevelopment", null)
                        .WithMany("GRNTI")
                        .HasForeignKey("InnovativeDevelopmentId");
                });

            modelBuilder.Entity("Domain.Entities.Grant", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.HasOne("Domain.Entities.ScientificSchool", null)
                        .WithMany("Grants")
                        .HasForeignKey("ScientificSchoolId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureCustomer", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("InfrastructureCustomers")
                        .HasForeignKey("InfrastructureProjectId");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructurePhoto", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("InfrastructurePhotos")
                        .HasForeignKey("InfrastructureProjectId");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureProject", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.HasOne("Domain.Entities.ResearchDirection", "ResearchDirection")
                        .WithMany()
                        .HasForeignKey("ResearchDirectionId");

                    b.Navigation("ApplicationState");

                    b.Navigation("ResearchDirection");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureProjectRealization", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("InfrastructureProjectRealizations")
                        .HasForeignKey("InfrastructureProjectId");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureResearch", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("InfrastructureResearches")
                        .HasForeignKey("InfrastructureProjectId");

                    b.HasOne("Domain.Entities.ResearchDirection", "ResearchDirection")
                        .WithMany()
                        .HasForeignKey("ResearchDirectionId");

                    b.HasOne("Domain.Entities.InfrastructureResearcher", "Researcher")
                        .WithMany()
                        .HasForeignKey("ResearcherId");

                    b.Navigation("ResearchDirection");

                    b.Navigation("Researcher");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureResearcher", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", "InfrastructureProject")
                        .WithMany()
                        .HasForeignKey("InfrastructureProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfrastructureProject");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureScientificLeader", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", "InfrastructureProject")
                        .WithOne("ScienceLeader")
                        .HasForeignKey("Domain.Entities.InfrastructureScientificLeader", "InfrastructureProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfrastructureProject");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureServiceProvided", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("ServiceProvideds")
                        .HasForeignKey("InfrastructureProjectId");

                    b.HasOne("Domain.Entities.PriorityDirection", "PriorityDirection")
                        .WithMany()
                        .HasForeignKey("PriorityDirectionId");

                    b.Navigation("PriorityDirection");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureSpecialist", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("InfrastructureSpecialists")
                        .HasForeignKey("InfrastructureProjectId");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureTechnicalEquipment", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", null)
                        .WithMany("InfrastructureTechnicalEquipment")
                        .HasForeignKey("InfrastructureProjectId");

                    b.HasOne("Domain.Entities.InfrastructureTypeEquipment", "InfrastructureTypeEquipment")
                        .WithMany()
                        .HasForeignKey("InfrastructureTypeEquipmentId");

                    b.Navigation("InfrastructureTypeEquipment");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureTechnicalLeader", b =>
                {
                    b.HasOne("Domain.Entities.InfrastructureProject", "InfrastructureProject")
                        .WithOne("TechnicalLeader")
                        .HasForeignKey("Domain.Entities.InfrastructureTechnicalLeader", "InfrastructureProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfrastructureProject");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeBranch", b =>
                {
                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.InnovativeDevelopment", "InnovativeDevelopment")
                        .WithMany("Branches")
                        .HasForeignKey("InnovativeDevelopmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("InnovativeDevelopment");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeDepartment", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.InnovativeDevelopment", "InnovativeDevelopment")
                        .WithMany("Departments")
                        .HasForeignKey("InnovativeDevelopmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("InnovativeDevelopment");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeDevelopment", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.HasOne("Domain.Entities.BranchScience", "BranchScience")
                        .WithMany()
                        .HasForeignKey("BranchScienceId");

                    b.HasOne("Domain.Entities.CriticalTechnology", "CriticalTechnology")
                        .WithMany()
                        .HasForeignKey("CriticalTechnologyId");

                    b.HasOne("Domain.Entities.Efficiency", "Efficiency")
                        .WithMany()
                        .HasForeignKey("EfficiencyId");

                    b.HasOne("Domain.Entities.PriorityDirection", "PriorityDirection")
                        .WithMany()
                        .HasForeignKey("PriorityDirectionId");

                    b.HasOne("Domain.Entities.ReadinessDegree", "ReadinessDegree")
                        .WithMany()
                        .HasForeignKey("ReadinessDegreeId");

                    b.HasOne("Domain.Entities.TypeResearch", "TypeResearch")
                        .WithMany()
                        .HasForeignKey("TypeResearchId");

                    b.Navigation("ApplicationState");

                    b.Navigation("BranchScience");

                    b.Navigation("CriticalTechnology");

                    b.Navigation("Efficiency");

                    b.Navigation("PriorityDirection");

                    b.Navigation("ReadinessDegree");

                    b.Navigation("TypeResearch");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeLeader", b =>
                {
                    b.HasOne("Domain.Entities.InnovativeDevelopment", "InnovativeDevelopment")
                        .WithMany("InnovativeLeaders")
                        .HasForeignKey("InnovativeDevelopmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InnovativeDevelopment");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeMember", b =>
                {
                    b.HasOne("Domain.Entities.InnovativeDevelopment", "InnovativeDevelopment")
                        .WithMany("InnovativeMembers")
                        .HasForeignKey("InnovativeDevelopmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InnovativeDevelopment");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.Patent", b =>
                {
                    b.HasOne("Domain.Entities.InnovativeDevelopment", null)
                        .WithMany("Patents")
                        .HasForeignKey("InnovativeDevelopmentId");
                });

            modelBuilder.Entity("Domain.Entities.PresentationMaterial", b =>
                {
                    b.HasOne("Domain.Entities.InnovativeDevelopment", null)
                        .WithMany("PresentationMaterials")
                        .HasForeignKey("InnovativeDevelopmentId");
                });

            modelBuilder.Entity("Domain.Entities.Publication", b =>
                {
                    b.HasOne("Domain.Entities.ScientificSchool", null)
                        .WithMany("Publications")
                        .HasForeignKey("ScientificSchoolId");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchool", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.Navigation("ApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolBranch", b =>
                {
                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ScientificSchool", "ScientificSchool")
                        .WithMany("Branches")
                        .HasForeignKey("ScientificSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("ScientificSchool");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolDepartment", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ScientificSchool", "ScientificSchool")
                        .WithMany("Departments")
                        .HasForeignKey("ScientificSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("ScientificSchool");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolFounder", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ScientificSchool", "ScientificSchool")
                        .WithMany("Founders")
                        .HasForeignKey("ScientificSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ScientificSchool");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolGraduateStudent", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ScientificSchool", "ScientificSchool")
                        .WithMany("GraduateStudents")
                        .HasForeignKey("ScientificSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ScientificSchool");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolLeader", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ScientificSchool", "ScientificSchool")
                        .WithMany("Leaders")
                        .HasForeignKey("ScientificSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ScientificSchool");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchoolMember", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ScientificSchool", "ScientificSchool")
                        .WithMany("Members")
                        .HasForeignKey("ScientificSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ScientificSchool");
                });

            modelBuilder.Entity("Domain.Entities.InfrastructureProject", b =>
                {
                    b.Navigation("InfrastructureCustomers");

                    b.Navigation("InfrastructurePhotos");

                    b.Navigation("InfrastructureProjectRealizations");

                    b.Navigation("InfrastructureResearches");

                    b.Navigation("InfrastructureSpecialists");

                    b.Navigation("InfrastructureTechnicalEquipment");

                    b.Navigation("ScienceLeader");

                    b.Navigation("ServiceProvideds");

                    b.Navigation("TechnicalLeader");
                });

            modelBuilder.Entity("Domain.Entities.InnovativeDevelopment", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Departments");

                    b.Navigation("FullScaleSamples");

                    b.Navigation("GRNTI");

                    b.Navigation("InnovativeLeaders");

                    b.Navigation("InnovativeMembers");

                    b.Navigation("Patents");

                    b.Navigation("PresentationMaterials");
                });

            modelBuilder.Entity("Domain.Entities.ScientificSchool", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Departments");

                    b.Navigation("Founders");

                    b.Navigation("GraduateStudents");

                    b.Navigation("Grants");

                    b.Navigation("Leaders");

                    b.Navigation("Members");

                    b.Navigation("Publications");
                });
#pragma warning restore 612, 618
        }
    }
}
