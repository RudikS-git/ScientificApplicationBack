// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220319194855_2")]
    partial class _2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationGroup");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStates");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("UserId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.SelectRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer");

                    b.Property<int>("MinCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SelectRestriction");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.InputSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InputFieldId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("InputSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SelectFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SelectFieldId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SelectSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.FieldSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int?>("SelectSubmissionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("SelectSubmissionId");

                    b.ToTable("FieldSet");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InputFields");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("SelectRestrictionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("SelectRestrictionId");

                    b.ToTable("SelectField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SelectFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SelectFieldId");

                    b.ToTable("SelectOptions");
                });

            modelBuilder.Entity("Domain.Entities.Base.HistoryApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChangedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<int?>("NewApplicationStateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSubmissionId");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("LastApplicationStateId");

                    b.HasIndex("NewApplicationStateId");

                    b.ToTable("HistoryApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Base.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Domain.Entities.Base.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.Entities.Base.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Base.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputDateField", b =>
                {
                    b.HasBaseType("Domain.Entities.Base.FieldTypes.InputField");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MaxDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputDateField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberField", b =>
                {
                    b.HasBaseType("Domain.Entities.Base.FieldTypes.InputField");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("Max")
                        .HasColumnType("integer");

                    b.Property<int>("Min")
                        .HasColumnType("integer");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputNumberField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberPhoneField", b =>
                {
                    b.HasBaseType("Domain.Entities.Base.FieldTypes.InputField");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputNumberPhoneField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputTextField", b =>
                {
                    b.HasBaseType("Domain.Entities.Base.FieldTypes.InputField");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinLength")
                        .HasColumnType("integer");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputTextField");
                });

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.HasOne("Domain.Entities.Base.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.HasOne("Domain.Entities.Base.Application", null)
                        .WithMany("FieldGroups")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.Application", "Application")
                        .WithMany("ApplicationSubmissions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.HasOne("Domain.Entities.Base.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.InputSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany()
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationSubmission", "Submission")
                        .WithMany("InputSubmissions")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputField");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.FieldTypes.SelectField", "SelectField")
                        .WithMany()
                        .HasForeignKey("SelectFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationSubmission", "Submission")
                        .WithMany("SelectSubmissions")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelectField");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.FieldSet", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("FieldSets")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldSubmissions.SelectSubmission", null)
                        .WithMany("Values")
                        .HasForeignKey("SelectSubmissionId");

                    b.OwnsOne("Domain.Entities.Complex.FieldStyle", "Style", b1 =>
                        {
                            b1.Property<int>("FieldSetId")
                                .HasColumnType("integer");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("FieldSetId");

                            b1.ToTable("FieldSet");

                            b1.WithOwner()
                                .HasForeignKey("FieldSetId");
                        });

                    b.Navigation("ApplicationGroup");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.OwnsOne("Domain.Entities.Complex.FieldStyle", "Style", b1 =>
                        {
                            b1.Property<int>("InputFieldId")
                                .HasColumnType("integer");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("InputFieldId");

                            b1.ToTable("InputFields");

                            b1.WithOwner()
                                .HasForeignKey("InputFieldId");
                        });

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("SelectFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("SelectFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldRestrictions.SelectRestriction", "SelectRestriction")
                        .WithMany()
                        .HasForeignKey("SelectRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Complex.FieldStyle", "Style", b1 =>
                        {
                            b1.Property<int>("SelectFieldId")
                                .HasColumnType("integer");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("SelectFieldId");

                            b1.ToTable("SelectField");

                            b1.WithOwner()
                                .HasForeignKey("SelectFieldId");
                        });

                    b.Navigation("ApplicationGroup");

                    b.Navigation("SelectRestriction");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectOption", b =>
                {
                    b.HasOne("Domain.Entities.Base.FieldTypes.SelectField", null)
                        .WithMany("Options")
                        .HasForeignKey("SelectFieldId");
                });

            modelBuilder.Entity("Domain.Entities.Base.HistoryApplicationState", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationSubmission", null)
                        .WithMany("HistoryApplicationStates")
                        .HasForeignKey("ApplicationSubmissionId");

                    b.HasOne("Domain.Entities.Base.User", "ChangedUser")
                        .WithMany()
                        .HasForeignKey("ChangedUserId");

                    b.HasOne("Domain.Entities.Base.ApplicationState", "LastApplicationState")
                        .WithMany()
                        .HasForeignKey("LastApplicationStateId");

                    b.HasOne("Domain.Entities.Base.ApplicationState", "NewApplicationState")
                        .WithMany()
                        .HasForeignKey("NewApplicationStateId");

                    b.Navigation("ChangedUser");

                    b.Navigation("LastApplicationState");

                    b.Navigation("NewApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Base.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.Base.RoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.Base.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.OwnsOne("Domain.Entities.Complex.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PersonName");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Base.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("Domain.Entities.Base.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputDateField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputDataFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputDateFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Base.FieldRestrictions.InputDateField", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany()
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputNumberFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputNumberFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Base.FieldRestrictions.InputNumberField", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany()
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberPhoneField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputNumberPhoneFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputNumberPhoneFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Base.FieldRestrictions.InputNumberPhoneField", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany()
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputTextField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputTextFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputTextFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Base.FieldRestrictions.InputTextField", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany()
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.Navigation("ApplicationSubmissions");

                    b.Navigation("FieldGroups");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.Navigation("FieldSets");

                    b.Navigation("InputDataFields");

                    b.Navigation("InputNumberFields");

                    b.Navigation("InputNumberPhoneFields");

                    b.Navigation("InputTextFields");

                    b.Navigation("SelectFields");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationSubmission", b =>
                {
                    b.Navigation("HistoryApplicationStates");

                    b.Navigation("InputSubmissions");

                    b.Navigation("SelectSubmissions");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmission", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.FieldSet", b =>
                {
                    b.Navigation("InputDateFields");

                    b.Navigation("InputNumberFields");

                    b.Navigation("InputNumberPhoneFields");

                    b.Navigation("InputTextFields");

                    b.Navigation("SelectFields");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Base.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
