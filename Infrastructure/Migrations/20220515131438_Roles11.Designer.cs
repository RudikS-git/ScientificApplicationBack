// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220515131438_Roles11")]
    partial class Roles11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("ManageApplicationState")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationGroup", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStates", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationSubmissions", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputDateField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MaxDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MinDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputDateField", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("Max")
                        .HasColumnType("integer");

                    b.Property<int>("Min")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputNumberField", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberPhoneField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputNumberPhoneField", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputTextField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinLength")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputTextField", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.SelectRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer");

                    b.Property<int>("MinCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SelectRestriction", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.InputSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("InputFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSubmissionId");

                    b.HasIndex("InputFieldId");

                    b.ToTable("InputSubmission", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSubmissionId");

                    b.HasIndex("SelectFieldId");

                    b.ToTable("SelectSubmission", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmissonOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SelectOptionId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectSubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SelectOptionId");

                    b.HasIndex("SelectSubmissionId");

                    b.ToTable("SelectSubmissonOptions", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.FieldSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.ToTable("FieldSet", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("InputUnderTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.ToTable("InputFields", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FieldSetId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("SelectRestrictionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("SelectRestrictionId");

                    b.ToTable("SelectField", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SelectFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SelectFieldId");

                    b.ToTable("SelectOptions", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.HistoryApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<int>("NewApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSubmissionId");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("LastApplicationStateId");

                    b.HasIndex("NewApplicationStateId");

                    b.ToTable("HistoryApplicationStates", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PermissionUser", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.UserRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("UserRole", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.HasOne("Domain.Entities.Base.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.HasOne("Domain.Entities.Base.Application", "Application")
                        .WithMany("ApplicationGroups")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.Application", "Application")
                        .WithMany("ApplicationSubmissions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputDateField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputDataFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputDateFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany("InputDateField")
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputNumberFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputNumberFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany("InputNumberField")
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputNumberPhoneField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputNumberPhoneFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputNumberPhoneFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany("InputNumberPhoneField")
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputTextField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputTextFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("InputTextFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany("InputTextField")
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.InputSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationSubmission", "ApplicationSubmission")
                        .WithMany("InputSubmissions")
                        .HasForeignKey("ApplicationSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.InputField", "InputField")
                        .WithMany()
                        .HasForeignKey("InputFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationSubmission");

                    b.Navigation("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationSubmission", "ApplicationSubmission")
                        .WithMany("SelectSubmissions")
                        .HasForeignKey("ApplicationSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.SelectField", "SelectField")
                        .WithMany()
                        .HasForeignKey("SelectFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationSubmission");

                    b.Navigation("SelectField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmissonOptions", b =>
                {
                    b.HasOne("Domain.Entities.Base.FieldTypes.SelectOption", "SelectOption")
                        .WithMany()
                        .HasForeignKey("SelectOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldSubmissions.SelectSubmission", "SelectSubmission")
                        .WithMany("Values")
                        .HasForeignKey("SelectSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelectOption");

                    b.Navigation("SelectSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.FieldSet", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("FieldSets")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Complex.FieldStyle", "Style", b1 =>
                        {
                            b1.Property<int>("FieldSetId")
                                .HasColumnType("integer");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("FieldSetId");

                            b1.ToTable("FieldSet", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("FieldSetId");
                        });

                    b.Navigation("ApplicationGroup");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany()
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Complex.FieldStyle", "Style", b1 =>
                        {
                            b1.Property<int>("InputFieldId")
                                .HasColumnType("integer");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("InputFieldId");

                            b1.ToTable("InputFields", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("InputFieldId");
                        });

                    b.Navigation("ApplicationGroup");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("SelectFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.FieldSet", null)
                        .WithMany("SelectFields")
                        .HasForeignKey("FieldSetId");

                    b.HasOne("Domain.Entities.Base.FieldRestrictions.SelectRestriction", "SelectRestriction")
                        .WithMany()
                        .HasForeignKey("SelectRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Complex.FieldStyle", "Style", b1 =>
                        {
                            b1.Property<int>("SelectFieldId")
                                .HasColumnType("integer");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("SelectFieldId");

                            b1.ToTable("SelectField", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("SelectFieldId");
                        });

                    b.Navigation("ApplicationGroup");

                    b.Navigation("SelectRestriction");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectOption", b =>
                {
                    b.HasOne("Domain.Entities.Base.FieldTypes.SelectField", null)
                        .WithMany("Options")
                        .HasForeignKey("SelectFieldId");
                });

            modelBuilder.Entity("Domain.Entities.Base.HistoryApplicationState", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationSubmission", "ApplicationSubmission")
                        .WithMany("HistoryApplicationStates")
                        .HasForeignKey("ApplicationSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", "ChangedUser")
                        .WithMany()
                        .HasForeignKey("ChangedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationState", "LastApplicationState")
                        .WithMany()
                        .HasForeignKey("LastApplicationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationState", "NewApplicationState")
                        .WithMany()
                        .HasForeignKey("NewApplicationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationSubmission");

                    b.Navigation("ChangedUser");

                    b.Navigation("LastApplicationState");

                    b.Navigation("NewApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Base.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Base.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.OwnsOne("Domain.Entities.Complex.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers", "Identity");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PersonName");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Base.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entities.Base.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("Domain.Entities.Base.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Base.UserRoles", b =>
                {
                    b.HasOne("Domain.Entities.Base.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Domain.Entities.Base.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Base.UserRoles", "UserId", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.Navigation("ApplicationGroups");

                    b.Navigation("ApplicationSubmissions");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.Navigation("FieldSets");

                    b.Navigation("InputDataFields");

                    b.Navigation("InputNumberFields");

                    b.Navigation("InputNumberPhoneFields");

                    b.Navigation("InputTextFields");

                    b.Navigation("SelectFields");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationSubmission", b =>
                {
                    b.Navigation("HistoryApplicationStates");

                    b.Navigation("InputSubmissions");

                    b.Navigation("SelectSubmissions");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmissions.SelectSubmission", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.FieldSet", b =>
                {
                    b.Navigation("InputDateFields");

                    b.Navigation("InputNumberFields");

                    b.Navigation("InputNumberPhoneFields");

                    b.Navigation("InputTextFields");

                    b.Navigation("SelectFields");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.Navigation("InputDateField");

                    b.Navigation("InputNumberField");

                    b.Navigation("InputNumberPhoneField");

                    b.Navigation("InputTextField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Base.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
