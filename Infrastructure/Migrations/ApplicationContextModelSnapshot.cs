// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationGroup");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.InputRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int>("MinLength")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("InputRestriction");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldRestrictions.SelectRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer");

                    b.Property<int>("MinCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SelectRestriction");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkEntityFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("WorkEntityFieldId");

                    b.ToTable("FieldSubmission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Input"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Select"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Entity"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FieldSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InputRestrictionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSubmissionId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("InputRestrictionId");

                    b.ToTable("InputField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FieldSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("SelectRestrictionId")
                        .HasColumnType("integer");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("FieldSubmissionId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("SelectRestrictionId");

                    b.ToTable("SelectField");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.WorkEntityField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldSubmissionId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int?>("SelectFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldSubmissionId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("SelectFieldId");

                    b.ToTable("WorkEntityField");
                });

            modelBuilder.Entity("Domain.Entities.Base.HistoryApplicationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChangedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<int?>("NewApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("LastApplicationStateId");

                    b.HasIndex("NewApplicationStateId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("HistoryApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Base.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Domain.Entities.Base.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicationStateId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("UserId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FirstActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasCheckConstraint("CC_FirstActivityLastActivity", "\"FirstActivity\" <= \"LastActivity\"");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.HasOne("Domain.Entities.Base.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.HasOne("Domain.Entities.Base.Application", null)
                        .WithMany("FieldGroups")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldSubmission", b =>
                {
                    b.HasOne("Domain.Entities.Base.Submission", "Submission")
                        .WithMany("Values")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.WorkEntityField", null)
                        .WithMany("FieldSubmissions")
                        .HasForeignKey("WorkEntityFieldId");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.InputField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("InputFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldSubmission", "FieldSubmission")
                        .WithMany()
                        .HasForeignKey("FieldSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldRestrictions.InputRestriction", "InputRestriction")
                        .WithMany()
                        .HasForeignKey("InputRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("FieldSubmission");

                    b.Navigation("FieldType");

                    b.Navigation("InputRestriction");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.HasOne("Domain.Entities.Base.ApplicationGroup", "ApplicationGroup")
                        .WithMany("SelectFields")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldSubmission", "FieldSubmission")
                        .WithMany()
                        .HasForeignKey("FieldSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldRestrictions.SelectRestriction", "SelectRestriction")
                        .WithMany()
                        .HasForeignKey("SelectRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("FieldSubmission");

                    b.Navigation("FieldType");

                    b.Navigation("SelectRestriction");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.WorkEntityField", b =>
                {
                    b.HasOne("Domain.Entities.Base.FieldSubmission", "FieldSubmission")
                        .WithMany()
                        .HasForeignKey("FieldSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.FieldTypes.SelectField", null)
                        .WithMany("Options")
                        .HasForeignKey("SelectFieldId");

                    b.Navigation("FieldSubmission");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Domain.Entities.Base.HistoryApplicationState", b =>
                {
                    b.HasOne("Domain.Entities.Base.User", "ChangedUser")
                        .WithMany()
                        .HasForeignKey("ChangedUserId");

                    b.HasOne("Domain.Entities.Base.ApplicationState", "LastApplicationState")
                        .WithMany()
                        .HasForeignKey("LastApplicationStateId");

                    b.HasOne("Domain.Entities.Base.ApplicationState", "NewApplicationState")
                        .WithMany()
                        .HasForeignKey("NewApplicationStateId");

                    b.HasOne("Domain.Entities.Base.Submission", null)
                        .WithMany("HistoryApplicationStates")
                        .HasForeignKey("SubmissionId");

                    b.Navigation("ChangedUser");

                    b.Navigation("LastApplicationState");

                    b.Navigation("NewApplicationState");
                });

            modelBuilder.Entity("Domain.Entities.Base.Submission", b =>
                {
                    b.HasOne("Domain.Entities.Base.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.HasOne("Domain.Entities.Base.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ApplicationState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("Domain.Entities.Base.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Base.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Base.Application", b =>
                {
                    b.Navigation("FieldGroups");
                });

            modelBuilder.Entity("Domain.Entities.Base.ApplicationGroup", b =>
                {
                    b.Navigation("InputFields");

                    b.Navigation("SelectFields");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.SelectField", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Base.FieldTypes.WorkEntityField", b =>
                {
                    b.Navigation("FieldSubmissions");
                });

            modelBuilder.Entity("Domain.Entities.Base.Submission", b =>
                {
                    b.Navigation("HistoryApplicationStates");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Domain.Entities.Base.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
